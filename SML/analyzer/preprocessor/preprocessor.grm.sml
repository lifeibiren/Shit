functor PreProParserLrValsFun(structure Token : TOKEN)
 : sig structure ParserData : PARSER_DATA
       structure Tokens : PreProParser_TOKENS
   end
 = 
struct
structure ParserData=
struct
structure Header = 
struct
(*#line 1.2 "preprocessor.grm"*)

(*#line 13.1 "preprocessor.grm.sml"*)
end
structure LrTable = Token.LrTable
structure Token = Token
local open LrTable in 
val table=let val actionRows =
"\
\\001\000\000\000\
\\001\000\001\000\000\000\000\000\
\\001\000\001\000\095\000\002\000\028\000\003\000\027\000\004\000\026\000\
\\008\000\025\000\009\000\024\000\010\000\023\000\011\000\022\000\
\\012\000\021\000\013\000\020\000\014\000\019\000\018\000\018\000\
\\021\000\017\000\022\000\016\000\023\000\015\000\024\000\014\000\
\\025\000\013\000\026\000\012\000\027\000\011\000\000\000\
\\001\000\001\000\096\000\002\000\096\000\003\000\096\000\004\000\096\000\
\\005\000\096\000\007\000\096\000\008\000\096\000\009\000\096\000\
\\010\000\096\000\011\000\096\000\012\000\096\000\013\000\096\000\
\\014\000\096\000\018\000\096\000\021\000\096\000\022\000\096\000\
\\023\000\096\000\024\000\096\000\025\000\096\000\026\000\096\000\
\\027\000\096\000\000\000\
\\001\000\001\000\097\000\002\000\097\000\003\000\097\000\004\000\097\000\
\\005\000\097\000\007\000\097\000\008\000\097\000\009\000\097\000\
\\010\000\097\000\011\000\097\000\012\000\097\000\013\000\097\000\
\\014\000\097\000\018\000\097\000\021\000\097\000\022\000\097\000\
\\023\000\097\000\024\000\097\000\025\000\097\000\026\000\097\000\
\\027\000\097\000\000\000\
\\001\000\001\000\098\000\002\000\098\000\003\000\098\000\004\000\098\000\
\\005\000\098\000\007\000\098\000\008\000\098\000\009\000\098\000\
\\010\000\098\000\011\000\098\000\012\000\098\000\013\000\098\000\
\\014\000\098\000\018\000\098\000\021\000\098\000\022\000\098\000\
\\023\000\098\000\024\000\098\000\025\000\098\000\026\000\098\000\
\\027\000\098\000\000\000\
\\001\000\001\000\099\000\002\000\099\000\003\000\099\000\004\000\099\000\
\\005\000\099\000\007\000\099\000\008\000\099\000\009\000\099\000\
\\010\000\099\000\011\000\099\000\012\000\099\000\013\000\099\000\
\\014\000\099\000\018\000\099\000\021\000\099\000\022\000\099\000\
\\023\000\099\000\024\000\099\000\025\000\099\000\026\000\099\000\
\\027\000\099\000\000\000\
\\001\000\001\000\100\000\002\000\100\000\003\000\100\000\004\000\100\000\
\\005\000\100\000\007\000\100\000\008\000\100\000\009\000\100\000\
\\010\000\100\000\011\000\100\000\012\000\100\000\013\000\100\000\
\\014\000\100\000\018\000\100\000\021\000\100\000\022\000\100\000\
\\023\000\100\000\024\000\100\000\025\000\100\000\026\000\100\000\
\\027\000\100\000\000\000\
\\001\000\001\000\101\000\002\000\101\000\003\000\101\000\004\000\101\000\
\\005\000\101\000\007\000\101\000\008\000\101\000\009\000\101\000\
\\010\000\101\000\011\000\101\000\012\000\101\000\013\000\101\000\
\\014\000\101\000\018\000\101\000\021\000\101\000\022\000\101\000\
\\023\000\101\000\024\000\101\000\025\000\101\000\026\000\101\000\
\\027\000\101\000\000\000\
\\001\000\001\000\102\000\002\000\102\000\003\000\102\000\004\000\102\000\
\\005\000\102\000\007\000\102\000\008\000\102\000\009\000\102\000\
\\010\000\102\000\011\000\102\000\012\000\102\000\013\000\102\000\
\\014\000\102\000\018\000\102\000\021\000\102\000\022\000\102\000\
\\023\000\102\000\024\000\102\000\025\000\102\000\026\000\102\000\
\\027\000\102\000\000\000\
\\001\000\001\000\103\000\002\000\103\000\003\000\103\000\004\000\103\000\
\\005\000\103\000\007\000\103\000\008\000\103\000\009\000\103\000\
\\010\000\103\000\011\000\103\000\012\000\103\000\013\000\103\000\
\\014\000\103\000\018\000\103\000\021\000\103\000\022\000\103\000\
\\023\000\103\000\024\000\103\000\025\000\103\000\026\000\103\000\
\\027\000\103\000\000\000\
\\001\000\001\000\104\000\002\000\104\000\003\000\104\000\004\000\104\000\
\\005\000\104\000\007\000\104\000\008\000\104\000\009\000\104\000\
\\010\000\104\000\011\000\104\000\012\000\104\000\013\000\104\000\
\\014\000\104\000\018\000\104\000\021\000\104\000\022\000\104\000\
\\023\000\104\000\024\000\104\000\025\000\104\000\026\000\104\000\
\\027\000\104\000\000\000\
\\001\000\001\000\105\000\002\000\105\000\003\000\105\000\004\000\105\000\
\\005\000\105\000\007\000\105\000\008\000\105\000\009\000\105\000\
\\010\000\105\000\011\000\105\000\012\000\105\000\013\000\105\000\
\\014\000\105\000\018\000\105\000\021\000\105\000\022\000\105\000\
\\023\000\105\000\024\000\105\000\025\000\105\000\026\000\105\000\
\\027\000\105\000\000\000\
\\001\000\001\000\116\000\002\000\116\000\003\000\116\000\004\000\116\000\
\\005\000\116\000\007\000\116\000\008\000\116\000\009\000\116\000\
\\010\000\116\000\011\000\116\000\012\000\116\000\013\000\116\000\
\\014\000\116\000\018\000\116\000\021\000\116\000\022\000\116\000\
\\023\000\116\000\024\000\116\000\025\000\116\000\026\000\116\000\
\\027\000\116\000\000\000\
\\001\000\001\000\117\000\002\000\117\000\003\000\117\000\004\000\117\000\
\\005\000\117\000\007\000\117\000\008\000\117\000\009\000\117\000\
\\010\000\117\000\011\000\117\000\012\000\117\000\013\000\117\000\
\\014\000\117\000\018\000\117\000\021\000\117\000\022\000\117\000\
\\023\000\117\000\024\000\117\000\025\000\117\000\026\000\117\000\
\\027\000\117\000\000\000\
\\001\000\001\000\118\000\002\000\118\000\003\000\118\000\004\000\118\000\
\\005\000\118\000\007\000\118\000\008\000\118\000\009\000\118\000\
\\010\000\118\000\011\000\118\000\012\000\118\000\013\000\118\000\
\\014\000\118\000\018\000\118\000\021\000\118\000\022\000\118\000\
\\023\000\118\000\024\000\118\000\025\000\118\000\026\000\118\000\
\\027\000\118\000\000\000\
\\001\000\001\000\119\000\002\000\119\000\003\000\119\000\004\000\119\000\
\\005\000\119\000\007\000\119\000\008\000\119\000\009\000\119\000\
\\010\000\119\000\011\000\119\000\012\000\119\000\013\000\119\000\
\\014\000\119\000\018\000\119\000\021\000\119\000\022\000\119\000\
\\023\000\119\000\024\000\119\000\025\000\119\000\026\000\119\000\
\\027\000\119\000\000\000\
\\001\000\001\000\120\000\002\000\120\000\003\000\120\000\004\000\120\000\
\\005\000\120\000\007\000\120\000\008\000\120\000\009\000\120\000\
\\010\000\120\000\011\000\120\000\012\000\120\000\013\000\120\000\
\\014\000\120\000\018\000\120\000\021\000\120\000\022\000\120\000\
\\023\000\120\000\024\000\120\000\025\000\120\000\026\000\120\000\
\\027\000\120\000\000\000\
\\001\000\001\000\121\000\002\000\121\000\003\000\121\000\004\000\121\000\
\\005\000\121\000\007\000\121\000\008\000\121\000\009\000\121\000\
\\010\000\121\000\011\000\121\000\012\000\121\000\013\000\121\000\
\\014\000\121\000\018\000\121\000\021\000\121\000\022\000\121\000\
\\023\000\121\000\024\000\121\000\025\000\121\000\026\000\121\000\
\\027\000\121\000\000\000\
\\001\000\001\000\122\000\002\000\122\000\003\000\122\000\004\000\122\000\
\\005\000\122\000\007\000\122\000\008\000\122\000\009\000\122\000\
\\010\000\122\000\011\000\122\000\012\000\122\000\013\000\122\000\
\\014\000\122\000\018\000\122\000\021\000\122\000\022\000\122\000\
\\023\000\122\000\024\000\122\000\025\000\122\000\026\000\122\000\
\\027\000\122\000\000\000\
\\001\000\001\000\123\000\002\000\123\000\003\000\123\000\004\000\123\000\
\\005\000\123\000\007\000\123\000\008\000\123\000\009\000\123\000\
\\010\000\123\000\011\000\123\000\012\000\123\000\013\000\123\000\
\\014\000\123\000\018\000\123\000\021\000\123\000\022\000\123\000\
\\023\000\123\000\024\000\123\000\025\000\123\000\026\000\123\000\
\\027\000\123\000\000\000\
\\001\000\001\000\124\000\002\000\124\000\003\000\124\000\004\000\124\000\
\\005\000\124\000\007\000\124\000\008\000\124\000\009\000\124\000\
\\010\000\124\000\011\000\124\000\012\000\124\000\013\000\124\000\
\\014\000\124\000\018\000\124\000\021\000\124\000\022\000\124\000\
\\023\000\124\000\024\000\124\000\025\000\124\000\026\000\124\000\
\\027\000\124\000\000\000\
\\001\000\001\000\125\000\002\000\125\000\003\000\125\000\004\000\125\000\
\\005\000\125\000\007\000\125\000\008\000\125\000\009\000\125\000\
\\010\000\125\000\011\000\125\000\012\000\125\000\013\000\125\000\
\\014\000\125\000\018\000\125\000\021\000\125\000\022\000\125\000\
\\023\000\125\000\024\000\125\000\025\000\125\000\026\000\125\000\
\\027\000\125\000\000\000\
\\001\000\001\000\126\000\002\000\126\000\003\000\126\000\004\000\126\000\
\\005\000\126\000\007\000\126\000\008\000\126\000\009\000\126\000\
\\010\000\126\000\011\000\126\000\012\000\126\000\013\000\126\000\
\\014\000\126\000\018\000\126\000\021\000\126\000\022\000\126\000\
\\023\000\126\000\024\000\126\000\025\000\126\000\026\000\126\000\
\\027\000\126\000\000\000\
\\001\000\001\000\127\000\002\000\127\000\003\000\127\000\004\000\127\000\
\\005\000\127\000\007\000\127\000\008\000\127\000\009\000\127\000\
\\010\000\127\000\011\000\127\000\012\000\127\000\013\000\127\000\
\\014\000\127\000\018\000\127\000\021\000\127\000\022\000\127\000\
\\023\000\127\000\024\000\127\000\025\000\127\000\026\000\127\000\
\\027\000\127\000\000\000\
\\001\000\001\000\128\000\002\000\128\000\003\000\128\000\004\000\128\000\
\\005\000\128\000\007\000\128\000\008\000\128\000\009\000\128\000\
\\010\000\128\000\011\000\128\000\012\000\128\000\013\000\128\000\
\\014\000\128\000\018\000\128\000\021\000\128\000\022\000\128\000\
\\023\000\128\000\024\000\128\000\025\000\128\000\026\000\128\000\
\\027\000\128\000\000\000\
\\001\000\001\000\129\000\002\000\129\000\003\000\129\000\004\000\129\000\
\\005\000\129\000\007\000\129\000\008\000\129\000\009\000\129\000\
\\010\000\129\000\011\000\129\000\012\000\129\000\013\000\129\000\
\\014\000\129\000\018\000\129\000\021\000\129\000\022\000\129\000\
\\023\000\129\000\024\000\129\000\025\000\129\000\026\000\129\000\
\\027\000\129\000\000\000\
\\001\000\001\000\131\000\002\000\131\000\003\000\131\000\004\000\131\000\
\\005\000\131\000\007\000\131\000\008\000\131\000\009\000\131\000\
\\010\000\131\000\011\000\131\000\012\000\131\000\013\000\131\000\
\\014\000\131\000\018\000\131\000\021\000\131\000\022\000\131\000\
\\023\000\131\000\024\000\131\000\025\000\131\000\026\000\131\000\
\\027\000\131\000\000\000\
\\001\000\001\000\132\000\002\000\132\000\003\000\132\000\004\000\132\000\
\\005\000\132\000\007\000\132\000\008\000\132\000\009\000\132\000\
\\010\000\132\000\011\000\132\000\012\000\132\000\013\000\132\000\
\\014\000\132\000\018\000\132\000\021\000\132\000\022\000\132\000\
\\023\000\132\000\024\000\132\000\025\000\132\000\026\000\132\000\
\\027\000\132\000\000\000\
\\001\000\002\000\028\000\003\000\027\000\004\000\026\000\005\000\106\000\
\\007\000\106\000\008\000\025\000\009\000\024\000\010\000\023\000\
\\011\000\022\000\012\000\021\000\013\000\020\000\014\000\019\000\
\\018\000\018\000\021\000\017\000\022\000\016\000\023\000\015\000\
\\024\000\014\000\025\000\013\000\026\000\012\000\027\000\011\000\000\000\
\\001\000\002\000\028\000\003\000\027\000\004\000\026\000\005\000\107\000\
\\007\000\107\000\008\000\025\000\009\000\024\000\010\000\023\000\
\\011\000\022\000\012\000\021\000\013\000\020\000\014\000\019\000\
\\018\000\018\000\021\000\017\000\022\000\016\000\023\000\015\000\
\\024\000\014\000\025\000\013\000\026\000\012\000\027\000\011\000\000\000\
\\001\000\002\000\028\000\003\000\027\000\004\000\026\000\005\000\108\000\
\\007\000\108\000\008\000\025\000\009\000\024\000\010\000\023\000\
\\011\000\022\000\012\000\021\000\013\000\020\000\014\000\019\000\
\\018\000\018\000\021\000\017\000\022\000\016\000\023\000\015\000\
\\024\000\014\000\025\000\013\000\026\000\012\000\027\000\011\000\000\000\
\\001\000\002\000\028\000\003\000\027\000\004\000\026\000\005\000\109\000\
\\007\000\109\000\008\000\025\000\009\000\024\000\010\000\023\000\
\\011\000\022\000\012\000\021\000\013\000\020\000\014\000\019\000\
\\018\000\018\000\021\000\017\000\022\000\016\000\023\000\015\000\
\\024\000\014\000\025\000\013\000\026\000\012\000\027\000\011\000\000\000\
\\001\000\002\000\028\000\003\000\027\000\004\000\026\000\005\000\110\000\
\\007\000\110\000\008\000\025\000\009\000\024\000\010\000\023\000\
\\011\000\022\000\012\000\021\000\013\000\020\000\014\000\019\000\
\\018\000\018\000\021\000\017\000\022\000\016\000\023\000\015\000\
\\024\000\014\000\025\000\013\000\026\000\012\000\027\000\011\000\000\000\
\\001\000\002\000\028\000\003\000\027\000\004\000\026\000\005\000\111\000\
\\007\000\111\000\008\000\025\000\009\000\024\000\010\000\023\000\
\\011\000\022\000\012\000\021\000\013\000\020\000\014\000\019\000\
\\018\000\018\000\021\000\017\000\022\000\016\000\023\000\015\000\
\\024\000\014\000\025\000\013\000\026\000\012\000\027\000\011\000\000\000\
\\001\000\002\000\028\000\003\000\027\000\004\000\026\000\005\000\114\000\
\\007\000\114\000\008\000\025\000\009\000\024\000\010\000\023\000\
\\011\000\022\000\012\000\021\000\013\000\020\000\014\000\019\000\
\\018\000\018\000\021\000\017\000\022\000\016\000\023\000\015\000\
\\024\000\014\000\025\000\013\000\026\000\012\000\027\000\011\000\000\000\
\\001\000\002\000\028\000\003\000\027\000\004\000\026\000\005\000\115\000\
\\007\000\115\000\008\000\025\000\009\000\024\000\010\000\023\000\
\\011\000\022\000\012\000\021\000\013\000\020\000\014\000\019\000\
\\018\000\018\000\021\000\017\000\022\000\016\000\023\000\015\000\
\\024\000\014\000\025\000\013\000\026\000\012\000\027\000\011\000\000\000\
\\001\000\002\000\028\000\003\000\027\000\004\000\026\000\008\000\025\000\
\\009\000\024\000\010\000\023\000\011\000\022\000\012\000\021\000\
\\013\000\020\000\014\000\019\000\018\000\018\000\021\000\017\000\
\\022\000\016\000\023\000\015\000\024\000\014\000\025\000\013\000\
\\026\000\012\000\027\000\011\000\000\000\
\\001\000\005\000\112\000\007\000\112\000\000\000\
\\001\000\005\000\113\000\007\000\113\000\000\000\
\\001\000\005\000\036\000\007\000\035\000\000\000\
\\001\000\007\000\035\000\000\000\
\\001\000\014\000\133\000\015\000\064\000\018\000\018\000\022\000\016\000\
\\023\000\015\000\024\000\014\000\025\000\013\000\026\000\012\000\
\\027\000\011\000\000\000\
\\001\000\014\000\133\000\018\000\018\000\022\000\016\000\023\000\015\000\
\\024\000\014\000\025\000\013\000\026\000\012\000\027\000\011\000\000\000\
\\001\000\014\000\134\000\016\000\134\000\018\000\018\000\022\000\016\000\
\\023\000\015\000\024\000\014\000\025\000\013\000\026\000\012\000\
\\027\000\011\000\000\000\
\\001\000\014\000\135\000\016\000\135\000\018\000\135\000\022\000\135\000\
\\023\000\135\000\024\000\135\000\025\000\135\000\026\000\135\000\
\\027\000\135\000\000\000\
\\001\000\014\000\136\000\016\000\136\000\018\000\136\000\022\000\136\000\
\\023\000\136\000\024\000\136\000\025\000\136\000\026\000\136\000\
\\027\000\136\000\000\000\
\\001\000\014\000\137\000\016\000\137\000\018\000\137\000\022\000\137\000\
\\023\000\137\000\024\000\137\000\025\000\137\000\026\000\137\000\
\\027\000\137\000\000\000\
\\001\000\014\000\138\000\016\000\138\000\018\000\138\000\022\000\138\000\
\\023\000\138\000\024\000\138\000\025\000\138\000\026\000\138\000\
\\027\000\138\000\000\000\
\\001\000\014\000\139\000\016\000\139\000\018\000\139\000\022\000\139\000\
\\023\000\139\000\024\000\139\000\025\000\139\000\026\000\139\000\
\\027\000\139\000\000\000\
\\001\000\014\000\140\000\016\000\140\000\018\000\140\000\022\000\140\000\
\\023\000\140\000\024\000\140\000\025\000\140\000\026\000\140\000\
\\027\000\140\000\000\000\
\\001\000\014\000\141\000\016\000\141\000\018\000\141\000\022\000\141\000\
\\023\000\141\000\024\000\141\000\025\000\141\000\026\000\141\000\
\\027\000\141\000\000\000\
\\001\000\014\000\142\000\016\000\142\000\018\000\142\000\022\000\142\000\
\\023\000\142\000\024\000\142\000\025\000\142\000\026\000\142\000\
\\027\000\142\000\000\000\
\\001\000\014\000\143\000\016\000\143\000\018\000\143\000\022\000\143\000\
\\023\000\143\000\024\000\143\000\025\000\143\000\026\000\143\000\
\\027\000\143\000\000\000\
\\001\000\014\000\030\000\018\000\018\000\022\000\016\000\023\000\015\000\
\\024\000\014\000\025\000\013\000\026\000\012\000\027\000\011\000\000\000\
\\001\000\014\000\041\000\018\000\018\000\022\000\016\000\023\000\015\000\
\\024\000\014\000\025\000\013\000\026\000\012\000\027\000\011\000\000\000\
\\001\000\014\000\043\000\018\000\018\000\022\000\016\000\023\000\015\000\
\\024\000\014\000\025\000\013\000\026\000\012\000\027\000\011\000\000\000\
\\001\000\014\000\055\000\000\000\
\\001\000\014\000\057\000\018\000\018\000\022\000\016\000\023\000\015\000\
\\024\000\014\000\025\000\013\000\026\000\012\000\027\000\011\000\000\000\
\\001\000\014\000\058\000\018\000\018\000\022\000\016\000\023\000\015\000\
\\024\000\014\000\025\000\013\000\026\000\012\000\027\000\011\000\000\000\
\\001\000\014\000\059\000\018\000\018\000\022\000\016\000\023\000\015\000\
\\024\000\014\000\025\000\013\000\026\000\012\000\027\000\011\000\000\000\
\\001\000\014\000\060\000\018\000\018\000\022\000\016\000\023\000\015\000\
\\024\000\014\000\025\000\013\000\026\000\012\000\027\000\011\000\000\000\
\\001\000\014\000\061\000\000\000\
\\001\000\014\000\065\000\018\000\018\000\022\000\016\000\023\000\015\000\
\\024\000\014\000\025\000\013\000\026\000\012\000\027\000\011\000\000\000\
\\001\000\014\000\066\000\000\000\
\\001\000\014\000\067\000\000\000\
\\001\000\014\000\068\000\000\000\
\\001\000\014\000\070\000\000\000\
\\001\000\014\000\071\000\000\000\
\\001\000\014\000\087\000\000\000\
\\001\000\014\000\089\000\000\000\
\\001\000\014\000\091\000\000\000\
\\001\000\014\000\093\000\000\000\
\\001\000\016\000\133\000\017\000\081\000\018\000\018\000\022\000\016\000\
\\023\000\015\000\024\000\014\000\025\000\013\000\026\000\012\000\
\\027\000\011\000\000\000\
\\001\000\016\000\133\000\018\000\075\000\020\000\074\000\022\000\016\000\
\\023\000\015\000\024\000\014\000\025\000\013\000\026\000\012\000\
\\027\000\011\000\000\000\
\\001\000\016\000\138\000\017\000\144\000\018\000\138\000\022\000\138\000\
\\023\000\138\000\024\000\138\000\025\000\138\000\026\000\138\000\
\\027\000\138\000\000\000\
\\001\000\016\000\145\000\017\000\145\000\018\000\145\000\022\000\145\000\
\\023\000\145\000\024\000\145\000\025\000\145\000\026\000\145\000\
\\027\000\145\000\000\000\
\\001\000\016\000\082\000\000\000\
\\001\000\016\000\083\000\000\000\
\\001\000\016\000\084\000\000\000\
\\001\000\016\000\090\000\000\000\
\\001\000\018\000\018\000\022\000\016\000\023\000\015\000\024\000\014\000\
\\025\000\013\000\026\000\012\000\027\000\011\000\000\000\
\\001\000\018\000\045\000\000\000\
\\001\000\018\000\046\000\000\000\
\\001\000\018\000\048\000\000\000\
\\001\000\018\000\049\000\000\000\
\\001\000\018\000\086\000\020\000\085\000\000\000\
\"
val actionRowNumbers =
"\037\000\045\000\054\000\007\000\
\\006\000\040\000\005\000\003\000\
\\002\000\053\000\052\000\051\000\
\\050\000\049\000\047\000\081\000\
\\048\000\026\000\055\000\056\000\
\\081\000\082\000\083\000\081\000\
\\084\000\085\000\000\000\046\000\
\\027\000\009\000\041\000\038\000\
\\040\000\057\000\000\000\004\000\
\\058\000\008\000\059\000\024\000\
\\060\000\022\000\061\000\062\000\
\\042\000\063\000\064\000\065\000\
\\066\000\011\000\010\000\041\000\
\\039\000\013\000\067\000\028\000\
\\025\000\023\000\021\000\020\000\
\\044\000\068\000\074\000\014\000\
\\033\000\031\000\029\000\012\000\
\\035\000\015\000\073\000\077\000\
\\078\000\075\000\034\000\032\000\
\\030\000\036\000\079\000\086\000\
\\069\000\043\000\070\000\080\000\
\\076\000\016\000\071\000\017\000\
\\043\000\018\000\072\000\019\000\
\\001\000"
val gotoT =
"\
\\001\000\092\000\002\000\008\000\003\000\007\000\004\000\006\000\
\\005\000\005\000\010\000\004\000\011\000\003\000\014\000\002\000\
\\016\000\001\000\000\000\
\\000\000\
\\016\000\027\000\000\000\
\\000\000\
\\000\000\
\\006\000\032\000\007\000\031\000\008\000\030\000\009\000\029\000\000\000\
\\000\000\
\\000\000\
\\003\000\035\000\004\000\006\000\005\000\005\000\010\000\004\000\
\\011\000\003\000\014\000\002\000\016\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\012\000\037\000\014\000\036\000\016\000\001\000\000\000\
\\000\000\
\\000\000\
\\014\000\038\000\016\000\001\000\000\000\
\\014\000\040\000\016\000\001\000\000\000\
\\014\000\042\000\016\000\001\000\000\000\
\\000\000\
\\000\000\
\\014\000\045\000\016\000\001\000\000\000\
\\000\000\
\\000\000\
\\015\000\048\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\009\000\049\000\000\000\
\\000\000\
\\007\000\052\000\008\000\051\000\009\000\050\000\000\000\
\\000\000\
\\015\000\054\000\000\000\
\\000\000\
\\016\000\027\000\000\000\
\\000\000\
\\016\000\027\000\000\000\
\\000\000\
\\016\000\027\000\000\000\
\\000\000\
\\016\000\027\000\000\000\
\\000\000\
\\013\000\061\000\014\000\060\000\016\000\001\000\000\000\
\\016\000\027\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\009\000\067\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\016\000\027\000\000\000\
\\000\000\
\\013\000\071\000\014\000\060\000\016\000\001\000\017\000\070\000\000\000\
\\000\000\
\\002\000\074\000\003\000\007\000\004\000\006\000\005\000\005\000\
\\010\000\004\000\011\000\003\000\014\000\002\000\016\000\001\000\000\000\
\\002\000\075\000\003\000\007\000\004\000\006\000\005\000\005\000\
\\010\000\004\000\011\000\003\000\014\000\002\000\016\000\001\000\000\000\
\\002\000\076\000\003\000\007\000\004\000\006\000\005\000\005\000\
\\010\000\004\000\011\000\003\000\014\000\002\000\016\000\001\000\000\000\
\\000\000\
\\002\000\077\000\003\000\007\000\004\000\006\000\005\000\005\000\
\\010\000\004\000\011\000\003\000\014\000\002\000\016\000\001\000\000\000\
\\000\000\
\\013\000\078\000\014\000\060\000\016\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\003\000\035\000\004\000\006\000\005\000\005\000\010\000\004\000\
\\011\000\003\000\014\000\002\000\016\000\001\000\000\000\
\\003\000\035\000\004\000\006\000\005\000\005\000\010\000\004\000\
\\011\000\003\000\014\000\002\000\016\000\001\000\000\000\
\\003\000\035\000\004\000\006\000\005\000\005\000\010\000\004\000\
\\011\000\003\000\014\000\002\000\016\000\001\000\000\000\
\\003\000\035\000\004\000\006\000\005\000\005\000\010\000\004\000\
\\011\000\003\000\014\000\002\000\016\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\013\000\086\000\014\000\060\000\016\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\013\000\090\000\014\000\060\000\016\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\"
val numstates = 93
val numrules = 51
val s = ref "" and index = ref 0
val string_to_int = fn () => 
let val i = !index
in index := i+2; Char.ord(String.sub(!s,i)) + Char.ord(String.sub(!s,i+1)) * 256
end
val string_to_list = fn s' =>
    let val len = String.size s'
        fun f () =
           if !index < len then string_to_int() :: f()
           else nil
   in index := 0; s := s'; f ()
   end
val string_to_pairlist = fn (conv_key,conv_entry) =>
     let fun f () =
         case string_to_int()
         of 0 => EMPTY
          | n => PAIR(conv_key (n-1),conv_entry (string_to_int()),f())
     in f
     end
val string_to_pairlist_default = fn (conv_key,conv_entry) =>
    let val conv_row = string_to_pairlist(conv_key,conv_entry)
    in fn () =>
       let val default = conv_entry(string_to_int())
           val row = conv_row()
       in (row,default)
       end
   end
val string_to_table = fn (convert_row,s') =>
    let val len = String.size s'
        fun f ()=
           if !index < len then convert_row() :: f()
           else nil
     in (s := s'; index := 0; f ())
     end
local
  val memo = Array.array(numstates+numrules,ERROR)
  val _ =let fun g i=(Array.update(memo,i,REDUCE(i-numstates)); g(i+1))
       fun f i =
            if i=numstates then g i
            else (Array.update(memo,i,SHIFT (STATE i)); f (i+1))
          in f 0 handle General.Subscript => ()
          end
in
val entry_to_action = fn 0 => ACCEPT | 1 => ERROR | j => Array.sub(memo,(j-2))
end
val gotoT=Array.fromList(string_to_table(string_to_pairlist(NT,STATE),gotoT))
val actionRows=string_to_table(string_to_pairlist_default(T,entry_to_action),actionRows)
val actionRowNumbers = string_to_list actionRowNumbers
val actionT = let val actionRowLookUp=
let val a=Array.fromList(actionRows) in fn i=>Array.sub(a,i) end
in Array.fromList(List.map actionRowLookUp actionRowNumbers)
end
in LrTable.mkLrTable {actions=actionT,gotos=gotoT,numRules=numrules,
numStates=numstates,initialState=STATE 0}
end
end
local open Header in
type pos = int
type arg = unit
structure MlyValue = 
struct
datatype svalue = VOID | ntVOID of unit ->  unit | REST_NO_WHILE_SPACE of unit ->  (string) | PUNCTUATOR of unit ->  (string) | STRING_LITERAL of unit ->  (string) | CHAR_CONSTANT of unit ->  (char) | PP_NUMBER of unit ->  (string) | HEADER_NAME of unit ->  (string) | PP_TOKENS of unit ->  (string) | IDENTIFIER of unit ->  (string) | identifier_list of unit ->  (string list)
end
type svalue = MlyValue.svalue
type result = unit
end
structure EC=
struct
open LrTable
infix 5 $$
fun x $$ y = y::x
val is_keyword =
fn (T 1) => true | (T 2) => true | (T 3) => true | (T 4) => true | (T 7) => true | (T 8) => true | (T 9) => true | (T 10) => true | (T 11) => true | (T 12) => true | _ => false
val preferred_change : (term list * term list) list = 
nil
val noShift = 
fn _ => false
val showTerminal =
fn (T 0) => "EOF"
  | (T 1) => "IF"
  | (T 2) => "IFDEF"
  | (T 3) => "IFNDEF"
  | (T 4) => "ELIF"
  | (T 5) => "ELSE"
  | (T 6) => "ENDIF"
  | (T 7) => "INCLUDE"
  | (T 8) => "DEFINE"
  | (T 9) => "UNDEF"
  | (T 10) => "LINE"
  | (T 11) => "ERROR"
  | (T 12) => "PRAGMA"
  | (T 13) => "NEWLINE"
  | (T 14) => "LPAREN"
  | (T 15) => "RPAREN"
  | (T 16) => "COMMA"
  | (T 17) => "IDENTIFIER"
  | (T 18) => "PP_TOKENS"
  | (T 19) => "ELLIPSIS"
  | (T 20) => "HASH"
  | (T 21) => "HEADER_NAME"
  | (T 22) => "PP_NUMBER"
  | (T 23) => "CHAR_CONSTANT"
  | (T 24) => "STRING_LITERAL"
  | (T 25) => "PUNCTUATOR"
  | (T 26) => "REST_NO_WHILE_SPACE"
  | _ => "bogus-term"
local open Header in
val errtermvalue=
fn _ => MlyValue.VOID
end
val terms : term list = nil
 $$ (T 20) $$ (T 19) $$ (T 16) $$ (T 15) $$ (T 14) $$ (T 13) $$ (T 12) $$ (T 11) $$ (T 10) $$ (T 9) $$ (T 8) $$ (T 7) $$ (T 6) $$ (T 5) $$ (T 4) $$ (T 3) $$ (T 2) $$ (T 1) $$ (T 0)end
structure Actions =
struct 
exception mlyAction of int
local open Header in
val actions = 
fn (i392,defaultPos,stack,
    (()):arg) =>
case (i392,stack)
of  ( 0, ( ( _, ( MlyValue.ntVOID group1, group1left, group1right)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  group1 = group1 ()
 in ((*#line 65.14 "preprocessor.grm"*)(*#line 572.1 "preprocessor.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 0, ( result, group1left, group1right), rest671)
end
|  ( 1, ( ( _, ( MlyValue.ntVOID group_part1, group_part1left, group_part1right)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  group_part1 = group_part1 ()
 in ((*#line 68.19 "preprocessor.grm"*)(*#line 578.1 "preprocessor.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 1, ( result, group_part1left, group_part1right), rest671)
end
|  ( 2, ( ( _, ( MlyValue.ntVOID group_part1, _, group_part1right)) :: ( _, ( MlyValue.ntVOID group1, group1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  group1 = group1 ()
 val  group_part1 = group_part1 ()
 in ((*#line 69.25 "preprocessor.grm"*)(*#line 584.1 "preprocessor.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 1, ( result, group1left, group_part1right), rest671)
end
|  ( 3, ( ( _, ( MlyValue.ntVOID if_section1, if_section1left, if_section1right)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  if_section1 = if_section1 ()
 in ((*#line 72.19 "preprocessor.grm"*)(*#line 591.1 "preprocessor.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 2, ( result, if_section1left, if_section1right), rest671)
end
|  ( 4, ( ( _, ( MlyValue.ntVOID control_line1, control_line1left, control_line1right)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  control_line1 = control_line1 ()
 in ((*#line 73.21 "preprocessor.grm"*)(*#line 597.1 "preprocessor.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 2, ( result, control_line1left, control_line1right), rest671)
end
|  ( 5, ( ( _, ( MlyValue.ntVOID text_line1, text_line1left, text_line1right)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  text_line1 = text_line1 ()
 in ((*#line 74.18 "preprocessor.grm"*)(*#line 603.1 "preprocessor.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 2, ( result, text_line1left, text_line1right), rest671)
end
|  ( 6, ( ( _, ( MlyValue.ntVOID non_directive1, _, non_directive1right)) :: ( _, ( _, HASH1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  non_directive1 = non_directive1 ()
 in ((*#line 75.27 "preprocessor.grm"*)(*#line 609.1 "preprocessor.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 2, ( result, HASH1left, non_directive1right), rest671)
end
|  ( 7, ( ( _, ( MlyValue.ntVOID endif_line1, _, endif_line1right)) :: ( _, ( MlyValue.ntVOID if_group1, if_group1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  if_group1 = if_group1 ()
 val  endif_line1 = endif_line1 ()
 in ((*#line 78.28 "preprocessor.grm"*)(*#line 615.1 "preprocessor.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 3, ( result, if_group1left, endif_line1right), rest671)
end
|  ( 8, ( ( _, ( MlyValue.ntVOID endif_line1, _, endif_line1right)) :: ( _, ( MlyValue.ntVOID elif_groups1, _, _)) :: ( _, ( MlyValue.ntVOID if_group1, if_group1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  if_group1 = if_group1 ()
 val  elif_groups1 = elif_groups1 ()
 val  endif_line1 = endif_line1 ()
 in ((*#line 79.40 "preprocessor.grm"*)(*#line 622.1 "preprocessor.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 3, ( result, if_group1left, endif_line1right), rest671)
end
|  ( 9, ( ( _, ( MlyValue.ntVOID endif_line1, _, endif_line1right)) :: ( _, ( MlyValue.ntVOID else_group1, _, _)) :: ( _, ( MlyValue.ntVOID if_group1, if_group1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  if_group1 = if_group1 ()
 val  else_group1 = else_group1 ()
 val  endif_line1 = endif_line1 ()
 in ((*#line 80.39 "preprocessor.grm"*)(*#line 630.1 "preprocessor.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 3, ( result, if_group1left, endif_line1right), rest671)
end
|  ( 10, ( ( _, ( MlyValue.ntVOID endif_line1, _, endif_line1right)) :: ( _, ( MlyValue.ntVOID else_group1, _, _)) :: ( _, ( MlyValue.ntVOID elif_groups1, _, _)) :: ( _, ( MlyValue.ntVOID if_group1, if_group1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  if_group1 = if_group1 ()
 val  elif_groups1 = elif_groups1 ()
 val  else_group1 = else_group1 ()
 val  endif_line1 = endif_line1 ()
 in ((*#line 81.51 "preprocessor.grm"*)(*#line 638.1 "preprocessor.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 3, ( result, if_group1left, endif_line1right), rest671)
end
|  ( 11, ( ( _, ( _, _, NEWLINE1right)) :: ( _, ( MlyValue.ntVOID constant_expression1, _, _)) :: ( _, ( _, IF1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  constant_expression1 = constant_expression1 ()
 in ((*#line 84.39 "preprocessor.grm"*)(*#line 647.1 "preprocessor.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 4, ( result, IF1left, NEWLINE1right), rest671)
end
|  ( 12, ( ( _, ( MlyValue.ntVOID group1, _, group1right)) :: _ :: ( _, ( MlyValue.ntVOID constant_expression1, _, _)) :: ( _, ( _, IF1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  constant_expression1 = constant_expression1 ()
 val  group1 = group1 ()
 in ((*#line 85.45 "preprocessor.grm"*)(*#line 653.1 "preprocessor.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 4, ( result, IF1left, group1right), rest671)
end
|  ( 13, ( ( _, ( _, _, NEWLINE1right)) :: ( _, ( MlyValue.IDENTIFIER IDENTIFIER1, _, _)) :: ( _, ( _, IFDEF1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  IDENTIFIER1 = IDENTIFIER1 ()
 in ((*#line 86.33 "preprocessor.grm"*)(*#line 660.1 "preprocessor.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 4, ( result, IFDEF1left, NEWLINE1right), rest671)
end
|  ( 14, ( ( _, ( MlyValue.ntVOID group1, _, group1right)) :: _ :: ( _, ( MlyValue.IDENTIFIER IDENTIFIER1, _, _)) :: ( _, ( _, IFDEF1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  IDENTIFIER1 = IDENTIFIER1 ()
 val  group1 = group1 ()
 in ((*#line 87.39 "preprocessor.grm"*)(*#line 666.1 "preprocessor.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 4, ( result, IFDEF1left, group1right), rest671)
end
|  ( 15, ( ( _, ( _, _, NEWLINE1right)) :: ( _, ( MlyValue.IDENTIFIER IDENTIFIER1, _, _)) :: ( _, ( _, IFNDEF1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  IDENTIFIER1 = IDENTIFIER1 ()
 in ((*#line 88.34 "preprocessor.grm"*)(*#line 673.1 "preprocessor.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 4, ( result, IFNDEF1left, NEWLINE1right), rest671)
end
|  ( 16, ( ( _, ( MlyValue.ntVOID group1, _, group1right)) :: _ :: ( _, ( MlyValue.IDENTIFIER IDENTIFIER1, _, _)) :: ( _, ( _, IFNDEF1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  IDENTIFIER1 = IDENTIFIER1 ()
 val  group1 = group1 ()
 in ((*#line 89.40 "preprocessor.grm"*)(*#line 679.1 "preprocessor.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 4, ( result, IFNDEF1left, group1right), rest671)
end
|  ( 17, ( ( _, ( MlyValue.ntVOID elif_group1, elif_group1left, elif_group1right)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  elif_group1 = elif_group1 ()
 in ((*#line 91.26 "preprocessor.grm"*)(*#line 686.1 "preprocessor.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 5, ( result, elif_group1left, elif_group1right), rest671)
end
|  ( 18, ( ( _, ( MlyValue.ntVOID elif_group1, _, elif_group1right)) :: ( _, ( MlyValue.ntVOID elif_groups1, elif_groups1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  elif_groups1 = elif_groups1 ()
 val  elif_group1 = elif_group1 ()
 in ((*#line 92.31 "preprocessor.grm"*)(*#line 692.1 "preprocessor.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 5, ( result, elif_groups1left, elif_group1right), rest671)
end
|  ( 19, ( ( _, ( _, _, NEWLINE1right)) :: ( _, ( MlyValue.ntVOID constant_expression1, _, _)) :: ( _, ( _, ELIF1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  constant_expression1 = constant_expression1 ()
 in ((*#line 94.47 "preprocessor.grm"*)(*#line 699.1 "preprocessor.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 6, ( result, ELIF1left, NEWLINE1right), rest671)
end
|  ( 20, ( ( _, ( MlyValue.ntVOID group1, _, group1right)) :: _ :: ( _, ( MlyValue.ntVOID constant_expression1, _, _)) :: ( _, ( _, ELIF1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  constant_expression1 = constant_expression1 ()
 val  group1 = group1 ()
 in ((*#line 95.47 "preprocessor.grm"*)(*#line 705.1 "preprocessor.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 6, ( result, ELIF1left, group1right), rest671)
end
|  ( 21, ( ( _, ( _, _, NEWLINE1right)) :: ( _, ( _, ENDIF1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ((*#line 97.28 "preprocessor.grm"*)(*#line 712.1 "preprocessor.grm.sml"*)
))
 in ( LrTable.NT 8, ( result, ENDIF1left, NEWLINE1right), rest671)
end
|  ( 22, ( ( _, ( _, _, NEWLINE1right)) :: ( _, ( MlyValue.ntVOID pp_tokens1, _, _)) :: ( _, ( _, INCLUDE1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  pp_tokens1 = pp_tokens1 ()
 in ((*#line 99.42 "preprocessor.grm"*)(*#line 716.1 "preprocessor.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 9, ( result, INCLUDE1left, NEWLINE1right), rest671)
end
|  ( 23, ( ( _, ( _, _, NEWLINE1right)) :: ( _, ( MlyValue.ntVOID replacement_list1, _, _)) :: ( _, ( MlyValue.IDENTIFIER IDENTIFIER1, _, _)) :: ( _, ( _, DEFINE1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  IDENTIFIER1 = IDENTIFIER1 ()
 val  replacement_list1 = replacement_list1 ()
 in ((*#line 100.51 "preprocessor.grm"*)(*#line 722.1 "preprocessor.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 9, ( result, DEFINE1left, NEWLINE1right), rest671)
end
|  ( 24, ( ( _, ( _, _, NEWLINE1right)) :: _ :: ( _, ( MlyValue.ntVOID replacement_list1, _, _)) :: _ :: ( _, ( MlyValue.IDENTIFIER IDENTIFIER1, _, _)) :: ( _, ( _, DEFINE1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  IDENTIFIER1 = IDENTIFIER1 ()
 val  replacement_list1 = replacement_list1 ()
 in ((*#line 101.65 "preprocessor.grm"*)(*#line 729.1 "preprocessor.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 9, ( result, DEFINE1left, NEWLINE1right), rest671)
end
|  ( 25, ( ( _, ( _, _, NEWLINE1right)) :: _ :: ( _, ( MlyValue.ntVOID replacement_list1, _, _)) :: ( _, ( MlyValue.identifier_list identifier_list1, _, _)) :: _ :: ( _, ( MlyValue.IDENTIFIER IDENTIFIER1, _, _)) :: ( _, ( _, DEFINE1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  IDENTIFIER1 = IDENTIFIER1 ()
 val  identifier_list1 = identifier_list1 ()
 val  replacement_list1 = replacement_list1 ()
 in ((*#line 102.81 "preprocessor.grm"*)(*#line 736.1 "preprocessor.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 9, ( result, DEFINE1left, NEWLINE1right), rest671)
end
|  ( 26, ( ( _, ( _, _, NEWLINE1right)) :: ( _, ( MlyValue.ntVOID replacement_list1, _, _)) :: _ :: _ :: _ :: ( _, ( MlyValue.IDENTIFIER IDENTIFIER1, _, _)) :: ( _, ( _, DEFINE1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  IDENTIFIER1 = IDENTIFIER1 ()
 val  replacement_list1 = replacement_list1 ()
 in ((*#line 103.74 "preprocessor.grm"*)(*#line 744.1 "preprocessor.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 9, ( result, DEFINE1left, NEWLINE1right), rest671)
end
|  ( 27, ( ( _, ( _, _, NEWLINE1right)) :: ( _, ( MlyValue.ntVOID replacement_list1, _, _)) :: _ :: _ :: _ :: ( _, ( MlyValue.identifier_list identifier_list1, _, _)) :: _ :: ( _, ( MlyValue.IDENTIFIER IDENTIFIER1, _, _)) :: ( _, ( _, DEFINE1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  IDENTIFIER1 = IDENTIFIER1 ()
 val  identifier_list1 = identifier_list1 ()
 val  replacement_list1 = replacement_list1 ()
 in ((*#line 104.96 "preprocessor.grm"*)(*#line 751.1 "preprocessor.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 9, ( result, DEFINE1left, NEWLINE1right), rest671)
end
|  ( 28, ( ( _, ( _, _, NEWLINE1right)) :: ( _, ( MlyValue.IDENTIFIER IDENTIFIER1, _, _)) :: ( _, ( _, UNDEF1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  IDENTIFIER1 = IDENTIFIER1 ()
 in ((*#line 105.33 "preprocessor.grm"*)(*#line 759.1 "preprocessor.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 9, ( result, UNDEF1left, NEWLINE1right), rest671)
end
|  ( 29, ( ( _, ( _, _, NEWLINE1right)) :: ( _, ( MlyValue.ntVOID pp_tokens1, _, _)) :: ( _, ( _, LINE1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  pp_tokens1 = pp_tokens1 ()
 in ((*#line 106.31 "preprocessor.grm"*)(*#line 765.1 "preprocessor.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 9, ( result, LINE1left, NEWLINE1right), rest671)
end
|  ( 30, ( ( _, ( _, _, NEWLINE1right)) :: ( _, ( _, ERROR1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ((*#line 107.22 "preprocessor.grm"*)(*#line 771.1 "preprocessor.grm.sml"*)
))
 in ( LrTable.NT 9, ( result, ERROR1left, NEWLINE1right), rest671)
end
|  ( 31, ( ( _, ( _, _, NEWLINE1right)) :: ( _, ( MlyValue.ntVOID pp_tokens1, _, _)) :: ( _, ( _, ERROR1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  pp_tokens1 = pp_tokens1 ()
 in ((*#line 108.32 "preprocessor.grm"*)(*#line 775.1 "preprocessor.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 9, ( result, ERROR1left, NEWLINE1right), rest671)
end
|  ( 32, ( ( _, ( _, _, NEWLINE1right)) :: ( _, ( _, PRAGMA1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ((*#line 109.23 "preprocessor.grm"*)(*#line 781.1 "preprocessor.grm.sml"*)
))
 in ( LrTable.NT 9, ( result, PRAGMA1left, NEWLINE1right), rest671)
end
|  ( 33, ( ( _, ( _, _, NEWLINE1right)) :: ( _, ( MlyValue.ntVOID pp_tokens1, _, _)) :: ( _, ( _, PRAGMA1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  pp_tokens1 = pp_tokens1 ()
 in ((*#line 110.33 "preprocessor.grm"*)(*#line 785.1 "preprocessor.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 9, ( result, PRAGMA1left, NEWLINE1right), rest671)
end
|  ( 34, ( ( _, ( _, NEWLINE1left, NEWLINE1right)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ((*#line 111.16 "preprocessor.grm"*)(*#line 791.1 "preprocessor.grm.sml"*)
))
 in ( LrTable.NT 9, ( result, NEWLINE1left, NEWLINE1right), rest671)
end
|  ( 35, ( ( _, ( _, NEWLINE1left, NEWLINE1right)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ((*#line 113.21 "preprocessor.grm"*)(*#line 795.1 "preprocessor.grm.sml"*)
))
 in ( LrTable.NT 10, ( result, NEWLINE1left, NEWLINE1right), rest671)
end
|  ( 36, ( ( _, ( _, _, NEWLINE1right)) :: ( _, ( MlyValue.ntVOID pp_tokens1, pp_tokens1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  pp_tokens1 = pp_tokens1 ()
 in ((*#line 114.26 "preprocessor.grm"*)(*#line 799.1 "preprocessor.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 10, ( result, pp_tokens1left, NEWLINE1right), rest671)
end
|  ( 37, ( ( _, ( _, _, NEWLINE1right)) :: ( _, ( MlyValue.ntVOID pp_tokens1, pp_tokens1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  pp_tokens1 = pp_tokens1 ()
 in ((*#line 116.35 "preprocessor.grm"*)(*#line 805.1 "preprocessor.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 11, ( result, pp_tokens1left, NEWLINE1right), rest671)
end
|  ( 38, ( rest671)) => let val  result = MlyValue.ntVOID (fn _ => ((*#line 119.8 "preprocessor.grm"*)(*#line 811.1 "preprocessor.grm.sml"*)
))
 in ( LrTable.NT 12, ( result, defaultPos, defaultPos), rest671)
end
|  ( 39, ( ( _, ( MlyValue.ntVOID pp_tokens1, pp_tokens1left, pp_tokens1right)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  pp_tokens1 = pp_tokens1 ()
 in ((*#line 120.18 "preprocessor.grm"*)(*#line 815.1 "preprocessor.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 12, ( result, pp_tokens1left, pp_tokens1right), rest671)
end
|  ( 40, ( ( _, ( MlyValue.ntVOID preprocessing_token1, preprocessing_token1left, preprocessing_token1right)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  preprocessing_token1 = preprocessing_token1 ()
 in ((*#line 123.28 "preprocessor.grm"*)(*#line 821.1 "preprocessor.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 13, ( result, preprocessing_token1left, preprocessing_token1right), rest671)
end
|  ( 41, ( ( _, ( MlyValue.ntVOID preprocessing_token1, _, preprocessing_token1right)) :: ( _, ( MlyValue.ntVOID pp_tokens1, pp_tokens1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  pp_tokens1 = pp_tokens1 ()
 val  preprocessing_token1 = preprocessing_token1 ()
 in ((*#line 124.38 "preprocessor.grm"*)(*#line 827.1 "preprocessor.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 13, ( result, pp_tokens1left, preprocessing_token1right), rest671)
end
|  ( 42, ( ( _, ( MlyValue.HEADER_NAME HEADER_NAME1, HEADER_NAME1left, HEADER_NAME1right)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  (HEADER_NAME as HEADER_NAME1) = HEADER_NAME1 ()
 in ((*#line 127.20 "preprocessor.grm"*)HEADER_NAME(*#line 834.1 "preprocessor.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 15, ( result, HEADER_NAME1left, HEADER_NAME1right), rest671)
end
|  ( 43, ( ( _, ( MlyValue.IDENTIFIER IDENTIFIER1, IDENTIFIER1left, IDENTIFIER1right)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  (IDENTIFIER as IDENTIFIER1) = IDENTIFIER1 ()
 in ((*#line 128.19 "preprocessor.grm"*)IDENTIFIER(*#line 840.1 "preprocessor.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 15, ( result, IDENTIFIER1left, IDENTIFIER1right), rest671)
end
|  ( 44, ( ( _, ( MlyValue.PP_NUMBER PP_NUMBER1, PP_NUMBER1left, PP_NUMBER1right)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  (PP_NUMBER as PP_NUMBER1) = PP_NUMBER1 ()
 in ((*#line 129.18 "preprocessor.grm"*)PP_NUMBER(*#line 846.1 "preprocessor.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 15, ( result, PP_NUMBER1left, PP_NUMBER1right), rest671)
end
|  ( 45, ( ( _, ( MlyValue.CHAR_CONSTANT CHAR_CONSTANT1, CHAR_CONSTANT1left, CHAR_CONSTANT1right)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  (CHAR_CONSTANT as CHAR_CONSTANT1) = CHAR_CONSTANT1 ()
 in ((*#line 130.22 "preprocessor.grm"*)CHAR_CONSTANT(*#line 852.1 "preprocessor.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 15, ( result, CHAR_CONSTANT1left, CHAR_CONSTANT1right), rest671)
end
|  ( 46, ( ( _, ( MlyValue.STRING_LITERAL STRING_LITERAL1, STRING_LITERAL1left, STRING_LITERAL1right)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  (STRING_LITERAL as STRING_LITERAL1) = STRING_LITERAL1 ()
 in ((*#line 131.23 "preprocessor.grm"*)STRING_LITERAL(*#line 858.1 "preprocessor.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 15, ( result, STRING_LITERAL1left, STRING_LITERAL1right), rest671)
end
|  ( 47, ( ( _, ( MlyValue.PUNCTUATOR PUNCTUATOR1, PUNCTUATOR1left, PUNCTUATOR1right)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  (PUNCTUATOR as PUNCTUATOR1) = PUNCTUATOR1 ()
 in ((*#line 132.19 "preprocessor.grm"*)PUNCTUATOR(*#line 864.1 "preprocessor.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 15, ( result, PUNCTUATOR1left, PUNCTUATOR1right), rest671)
end
|  ( 48, ( ( _, ( MlyValue.REST_NO_WHILE_SPACE REST_NO_WHILE_SPACE1, REST_NO_WHILE_SPACE1left, REST_NO_WHILE_SPACE1right)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  (REST_NO_WHILE_SPACE as REST_NO_WHILE_SPACE1) = REST_NO_WHILE_SPACE1 ()
 in ((*#line 133.28 "preprocessor.grm"*)REST_NO_WHILE_SPACE(*#line 870.1 "preprocessor.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 15, ( result, REST_NO_WHILE_SPACE1left, REST_NO_WHILE_SPACE1right), rest671)
end
|  ( 49, ( ( _, ( MlyValue.IDENTIFIER IDENTIFIER1, IDENTIFIER1left, IDENTIFIER1right)) :: rest671)) => let val  result = MlyValue.identifier_list (fn _ => let val  (IDENTIFIER as IDENTIFIER1) = IDENTIFIER1 ()
 in ((*#line 136.19 "preprocessor.grm"*)[IDENTIFIER](*#line 876.1 "preprocessor.grm.sml"*)
)
end)
 in ( LrTable.NT 16, ( result, IDENTIFIER1left, IDENTIFIER1right), rest671)
end
|  ( 50, ( ( _, ( MlyValue.IDENTIFIER IDENTIFIER1, _, IDENTIFIER1right)) :: _ :: ( _, ( MlyValue.identifier_list identifier_list1, identifier_list1left, _)) :: rest671)) => let val  result = MlyValue.identifier_list (fn _ => let val  (identifier_list as identifier_list1) = identifier_list1 ()
 val  (IDENTIFIER as IDENTIFIER1) = IDENTIFIER1 ()
 in ((*#line 137.41 "preprocessor.grm"*)identifier_list @ [IDENTIFIER](*#line 882.1 "preprocessor.grm.sml"*)
)
end)
 in ( LrTable.NT 16, ( result, identifier_list1left, IDENTIFIER1right), rest671)
end
| _ => raise (mlyAction i392)
end
val void = MlyValue.VOID
val extract = fn a => (fn MlyValue.ntVOID x => x
| _ => let exception ParseInternal
	in raise ParseInternal end) a ()
end
end
structure Tokens : PreProParser_TOKENS =
struct
type svalue = ParserData.svalue
type ('a,'b) token = ('a,'b) Token.token
fun EOF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 0,(ParserData.MlyValue.VOID,p1,p2))
fun IF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 1,(ParserData.MlyValue.VOID,p1,p2))
fun IFDEF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 2,(ParserData.MlyValue.VOID,p1,p2))
fun IFNDEF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 3,(ParserData.MlyValue.VOID,p1,p2))
fun ELIF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 4,(ParserData.MlyValue.VOID,p1,p2))
fun ELSE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 5,(ParserData.MlyValue.VOID,p1,p2))
fun ENDIF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 6,(ParserData.MlyValue.VOID,p1,p2))
fun INCLUDE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 7,(ParserData.MlyValue.VOID,p1,p2))
fun DEFINE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 8,(ParserData.MlyValue.VOID,p1,p2))
fun UNDEF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 9,(ParserData.MlyValue.VOID,p1,p2))
fun LINE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 10,(ParserData.MlyValue.VOID,p1,p2))
fun ERROR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 11,(ParserData.MlyValue.VOID,p1,p2))
fun PRAGMA (p1,p2) = Token.TOKEN (ParserData.LrTable.T 12,(ParserData.MlyValue.VOID,p1,p2))
fun NEWLINE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 13,(ParserData.MlyValue.VOID,p1,p2))
fun LPAREN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 14,(ParserData.MlyValue.VOID,p1,p2))
fun RPAREN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 15,(ParserData.MlyValue.VOID,p1,p2))
fun COMMA (p1,p2) = Token.TOKEN (ParserData.LrTable.T 16,(ParserData.MlyValue.VOID,p1,p2))
fun IDENTIFIER (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 17,(ParserData.MlyValue.IDENTIFIER (fn () => i),p1,p2))
fun PP_TOKENS (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 18,(ParserData.MlyValue.PP_TOKENS (fn () => i),p1,p2))
fun ELLIPSIS (p1,p2) = Token.TOKEN (ParserData.LrTable.T 19,(ParserData.MlyValue.VOID,p1,p2))
fun HASH (p1,p2) = Token.TOKEN (ParserData.LrTable.T 20,(ParserData.MlyValue.VOID,p1,p2))
fun HEADER_NAME (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 21,(ParserData.MlyValue.HEADER_NAME (fn () => i),p1,p2))
fun PP_NUMBER (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 22,(ParserData.MlyValue.PP_NUMBER (fn () => i),p1,p2))
fun CHAR_CONSTANT (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 23,(ParserData.MlyValue.CHAR_CONSTANT (fn () => i),p1,p2))
fun STRING_LITERAL (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 24,(ParserData.MlyValue.STRING_LITERAL (fn () => i),p1,p2))
fun PUNCTUATOR (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 25,(ParserData.MlyValue.PUNCTUATOR (fn () => i),p1,p2))
fun REST_NO_WHILE_SPACE (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 26,(ParserData.MlyValue.REST_NO_WHILE_SPACE (fn () => i),p1,p2))
end
end
